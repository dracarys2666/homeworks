#include <iostream>
#include<fstream>
#include <TLorentzVector.h>
#include <TFile.h>
#include <TTree.h>
using namespace std;
// with trigger
void sh_sr()
{
    const int nFiles = 14;
    double sum_xAOD_weight[nFiles][4];
    double nos[nFiles][4], nss[nFiles][4];
    double numbero[4], numbers[4];
  
    // os
    Float_t d_tau_0_jet_rnn_score;
    double_t d_weight_mc;
    double_t d_kfactor;
    double_t d_filter_efficiency;
    double_t d_AMI_cross_section;
    
    TLorentzVector *d_tau_0_p4;
    TLorentzVector *d_lep_0_p4;
    TLorentzVector *d_met_reco_p4;
    
    //ss
    Float_t b_tau_0_jet_rnn_score;
    double_t b_weight_mc;
    double_t b_kfactor;
    double_t b_filter_efficiency;
    double_t b_AMI_cross_section;
    
    TLorentzVector *b_tau_0_p4;
    TLorentzVector *b_lep_0_p4;
    TLorentzVector *b_met_reco_p4;
    
    double eventweight,kfactor,filterefficiency,crosssection;
    double tau_px,tau_py,tau_pz,tau_e,tau_pt,tau_eta,tau_phi;
    double lep_px,lep_py,lep_pz,lep_e,lep_et,lep_pt,lep_eta,lep_phi;
    double met_px,met_py,met_pz,met_pt,met_e;
    double delta_phi,cos_phi,mt;  // phi(muon,met)
    double phi_taumet,phi_mumet,cos2;
    double mass,rnn;
    
    stringstream os_file[nFiles][4];
    stringstream ss_file[nFiles][4];
    stringstream out_file[4];
    
    TFile *finos[nFiles][4];
    TFile *finss[nFiles][4];
    TFile *fout[4];
    
    TTree *Tos[nFiles];
    TTree *Tss[nFiles];
    
    TH1D *h_metadata[nFiles][4];
    TH1D* ptos[nFiles][4];
    TH1D *pt_os[nFiles][4];
    TH1D *pt_ss[nFiles][4];
    TH1D *phi_os[nFiles][4];
    TH1D *phi_ss[nFiles][4];
    TH1D *eta_os[nFiles][4];
    TH1D *eta_ss[nFiles][4];
    TH1D *met_os[nFiles][4];
    TH1D *met_ss[nFiles][4];
    TH1D *rnn_os[nFiles][4];
    TH1D *rnn_ss[nFiles][4];
    TH1D *pt0[nFiles][4];
    TH1D *eta0[nFiles][4];
    TH1D *phi0[nFiles][4];
    TH1D *met0[nFiles][4];
    TH1D *rnn_score0[nFiles][4];
    
    TH1D* pt_excessive[nFiles][4];
    TH1D* eta_excessive[nFiles][4];
    TH1D* phi_excessive[nFiles][4];
    TH1D* met_excessive[nFiles][4];
    TH1D* rnn_excessive[nFiles][4];
    
    TH1D* pt_ex[4];
    TH1D* eta_ex[4];
    TH1D* phi_ex[4];
    TH1D* met_ex[4];
    TH1D* rnn_ex[4];
    
    TH1D* pt[4];
    TH1D* eta[4];
    TH1D* phi[4];
    TH1D* met[4];
    TH1D* rnn_score[4];
    
    out_file[0]<<"ztt18.root";
    out_file[1]<<"wen18.root";
    out_file[2]<<"wmn18.root";
    out_file[3]<<"wtn18.root";
    
    //   muon iso = 0 ,with trigger
    for(int file_ii = 0; file_ii < nFiles; file_ii++){
        
        os_file[file_ii][0]<<"/Users/dracarys/Desktop/kadai/basecut/18/sherpa/ztt18cutos_"<<file_ii+28<<".root";
        ss_file[file_ii][0]<<"/Users/dracarys/Desktop/kadai/basecut/18/sherpa/ztt18cutss_"<<file_ii+28<<".root";
        os_file[file_ii][1]<<"/Users/dracarys/Desktop/kadai/basecut/18/sherpa/wen18cutos_"<<file_ii+70<<".root";
        ss_file[file_ii][1]<<"/Users/dracarys/Desktop/kadai/basecut/18/sherpa/wen18cutss_"<<file_ii+70<<".root";
        os_file[file_ii][2]<<"/Users/dracarys/Desktop/kadai/basecut/18/sherpa/wmn18cutos_"<<file_ii+56<<".root";
        ss_file[file_ii][2]<<"/Users/dracarys/Desktop/kadai/basecut/18/sherpa/wmn18cutss_"<<file_ii+56<<".root";
        os_file[file_ii][3]<<"/Users/dracarys/Desktop/kadai/basecut/18/sherpa/wtn18cutos_"<<file_ii+84<<".root";
        ss_file[file_ii][3]<<"/Users/dracarys/Desktop/kadai/basecut/18/sherpa/wtn18cutss_"<<file_ii+84<<".root";
    } //  for ( file_ii )
    
        for(int j = 0; j < 4; j++){
            cout<<"j = "<<j<<endl;
            
            pt[j] = new TH1D("pt",";Tau Pt[GeV];Events",20,20,70);
            met[j] = new TH1D("met",";met[GeV];Events",20,0,100);
            eta[j] = new TH1D("eta",";tau eta;Events",20,-2.5,2.5);
            phi[j] = new TH1D("phi",";tau phi;Events",20,-3.2,3.2);
            rnn_score[j] = new TH1D("rnn",";Jet RNN Score;Events",20,0.8,1);
            
            pt_ex[j] = new TH1D("pt_ex",";Tau Pt[GeV];Events",20,20,70);
            met_ex[j] = new TH1D("met_ex",";met[GeV];Events",20,0,100);
            eta_ex[j] = new TH1D("eta_ex",";tau eta;Events",20,-2.5,2.5);
            phi_ex[j] = new TH1D("phi_ex",";tau phi;Events",20,-3.2,3.2);
            rnn_ex[j] = new TH1D("rnn_ex",";Jet RNN Score;Events",20,0.8,1);
        
            numbero[j]=0;
            numbers[j]=0;
        
        for(int file_ii = 0; file_ii < nFiles; file_ii++){
        
        nos[file_ii][j]=0;
        nss[file_ii][j]=0;
            
        finos[file_ii][j] = new TFile(os_file[file_ii][j].str().c_str(), "read");
        finss[file_ii][j] = new TFile(ss_file[file_ii][j].str().c_str(), "read");
     
    //    cout<<"file_ii ="<<file_ii<<"\n"
    //        <<os_file[file_ii][j].str().c_str()<<" read"<<endl;
    //    cout<<ss_file[file_ii][j].str().c_str()<<" read"<<endl;
      
         // Σ xAOD event weight
        h_metadata[file_ii][j] = (TH1D*)finos[file_ii][j]->Get("h_metadata");
        sum_xAOD_weight[file_ii][j] = h_metadata[file_ii][j]->GetBinContent(8);
    //    cout<<"sum_xAOD_weight = "<<fixed<<sum_xAOD_weight[file_ii][j]<<endl;
        // Σ xAOD event weight  over
    
        //os
        Tos[file_ii] = (TTree*)finos[file_ii][j]->Get("NOMINAL");
        Tos[file_ii]->SetBranchStatus("*",0);
        Tos[file_ii]->SetBranchStatus("tau_0_p4",1);
        Tos[file_ii]->SetBranchStatus("lep_0_p4",1);
        Tos[file_ii]->SetBranchStatus("met_reco_p4",1);
        Tos[file_ii]->SetBranchStatus("AMI_cross_section",1);
        Tos[file_ii]->SetBranchStatus("kfactor",1);
        Tos[file_ii]->SetBranchStatus("filter_efficiency",1);
        Tos[file_ii]->SetBranchStatus("weight_mc",1);
        Tos[file_ii]->SetBranchStatus("tau_0_jet_rnn_score",1);
    
        d_tau_0_p4 =0;  // ******   初期化
        d_lep_0_p4 =0;
        d_met_reco_p4 =0;
        Tos[file_ii]->SetBranchAddress("tau_0_p4",&d_tau_0_p4);
        Tos[file_ii]->SetBranchAddress("lep_0_p4",&d_lep_0_p4);
        Tos[file_ii]->SetBranchAddress("met_reco_p4",&d_met_reco_p4);
        Tos[file_ii]->SetBranchAddress("AMI_cross_section",&d_AMI_cross_section);
        Tos[file_ii]->SetBranchAddress("kfactor",&d_kfactor);
        Tos[file_ii]->SetBranchAddress("filter_efficiency",&d_filter_efficiency);
        Tos[file_ii]->SetBranchAddress("weight_mc",&d_weight_mc);
        Tos[file_ii]->SetBranchAddress("tau_0_jet_rnn_score",&d_tau_0_jet_rnn_score);
    
        //ss
        Tss[file_ii] = (TTree*)finss[file_ii][j]->Get("NOMINAL");
        Tss[file_ii]->SetBranchStatus("*",0);
        Tss[file_ii]->SetBranchStatus("tau_0_p4",1);
        Tss[file_ii]->SetBranchStatus("lep_0_p4",1);
        Tss[file_ii]->SetBranchStatus("met_reco_p4",1);
        Tss[file_ii]->SetBranchStatus("AMI_cross_section",1);
        Tss[file_ii]->SetBranchStatus("kfactor",1);
        Tss[file_ii]->SetBranchStatus("filter_efficiency",1);
        Tss[file_ii]->SetBranchStatus("weight_mc",1);
        Tss[file_ii]->SetBranchStatus("tau_0_jet_rnn_score",1);
    
        b_tau_0_p4 =0;  // ******   初期化
        b_lep_0_p4 =0;
        b_met_reco_p4 =0;
        Tss[file_ii]->SetBranchAddress("tau_0_p4",&b_tau_0_p4);
        Tss[file_ii]->SetBranchAddress("lep_0_p4",&b_lep_0_p4);
        Tss[file_ii]->SetBranchAddress("met_reco_p4",&b_met_reco_p4);
        Tss[file_ii]->SetBranchAddress("AMI_cross_section",&b_AMI_cross_section);
        Tss[file_ii]->SetBranchAddress("kfactor",&b_kfactor);
        Tss[file_ii]->SetBranchAddress("filter_efficiency",&b_filter_efficiency);
        Tss[file_ii]->SetBranchAddress("weight_mc",&b_weight_mc);
        Tss[file_ii]->SetBranchAddress("tau_0_jet_rnn_score",&b_tau_0_jet_rnn_score);
    
        pt_os[file_ii][j] = new TH1D("ptos",";Tau Pt[GeV];Events",20,20,70);
        pt_ss[file_ii][j] = new TH1D("ptss",";Tau Pt[GeV];Events",20,20,70);
        met_os[file_ii][j] = new TH1D("metos",";met[GeV];Events",20,0,100);
        met_ss[file_ii][j] = new TH1D("metss",";met[GeV];Events",20,0,100);
        eta_os[file_ii][j] = new TH1D("etaos",";tau eta;Events",20,-2.5,2.5);
        eta_ss[file_ii][j] = new TH1D("etass",";tau eta;Events",20,-2.5,2.5);
        phi_os[file_ii][j] = new TH1D("phios",";tau phi;Events",20,-3.2,3.2);
        phi_ss[file_ii][j] = new TH1D("phiss",";tau phi;Events",20,-3.2,3.2);
        rnn_os[file_ii][j] = new TH1D("rnnos",";Jet RNN Score;Events",20,0.8,1);
        rnn_ss[file_ii][j] = new TH1D("rnnss",";Jet RNN Score;Events",20,0.8,1);
                
        pt_excessive[file_ii][j] = new TH1D("pt_excessive",";Tau Pt[GeV];Events",20,20,70);
        met_excessive[file_ii][j] = new TH1D("met_excessive",";met[GeV];Events",20,0,100);
        eta_excessive[file_ii][j] = new TH1D("eta_excessive",";tau eta;Events",20,-2.5,2.5);
        phi_excessive[file_ii][j] = new TH1D("phi_excessive",";tau phi;Events",20,-3.2,3.2);
        rnn_excessive[file_ii][j] = new TH1D("rnn_excessive",";Jet RNN Score;Events",20,0.8,1);
                
        pt0[file_ii][j] = new TH1D("pt0",";Tau Pt[GeV];Events",20,20,70);
        met0[file_ii][j] = new TH1D("met0",";met[GeV];Events",20,0,100);
        eta0[file_ii][j] = new TH1D("eta0",";tau eta;Events",20,-2.5,2.5);
        phi0[file_ii][j] = new TH1D("phi0",";tau phi;Events",20,-3.2,3.2);
        rnn_score0[file_ii][j] = new TH1D("rnn0",";Jet RNN Score;Events",20,0.8,1);
        
        // os
        int nentries_os = Tos[file_ii]->GetEntries();
//        cout<<"nentries_os = "<<nentries_os<<endl;
        for(int entryos_ii = 0; entryos_ii < nentries_os; entryos_ii++){
           
        Tos[file_ii]->GetEntry(entryos_ii);
          
            tau_px = d_tau_0_p4->Px();
            tau_py = d_tau_0_p4->Py();
            tau_pz = d_tau_0_p4->Pz();
            tau_pt = d_tau_0_p4->Pt();
            tau_eta = d_tau_0_p4->Eta();
            tau_phi = d_tau_0_p4->Phi();
            tau_e = d_tau_0_p4->Energy();
            
            lep_px = d_lep_0_p4->Px();
            lep_py = d_lep_0_p4->Py();
            lep_pz = d_lep_0_p4->Pz();
            lep_e = d_lep_0_p4->Energy();
            lep_et = d_lep_0_p4->Et();
            lep_pt = d_lep_0_p4->Pt();
            lep_eta = d_lep_0_p4->Eta();
            lep_phi = d_lep_0_p4->Phi();
            
            met_px = d_met_reco_p4->Px();
            met_py = d_met_reco_p4->Py();
            met_pz = d_met_reco_p4->Pz();
            met_pt = d_met_reco_p4->Pt();
            met_e = d_met_reco_p4->Energy();
                
            rnn = d_tau_0_jet_rnn_score;
            
            TLorentzVector v1;
            v1.SetPxPyPzE(lep_px,lep_py,lep_pz,lep_e);
            TLorentzVector v2;
            v2.SetPxPyPzE(tau_px,tau_py,tau_pz,tau_e);
            TLorentzVector v3;
            v3.SetPxPyPzE(met_px,met_py,met_pz,met_e);
                          
            // Mt(muon,met)
            delta_phi = v1.DeltaPhi(v3);
            cos_phi = cos(delta_phi);
            mt = sqrt(2*met_e*lep_et*(1-cos_phi));
                          
            //  cos_phi(tau,met)+cos_phi(muon,met)
            phi_taumet = v2.DeltaPhi(v3);
            phi_mumet = v1.DeltaPhi(v3);
            cos2 = cos(phi_taumet)+cos(phi_mumet);
                
            // M(tau,muon)
            TLorentzVector v4 = v1 + v2;
            mass = v4.M();
                
            // SR
            if( mt<50 && cos2>-0.5 && mass>45 && mass<80 ){
                
            crosssection = d_AMI_cross_section;
            filterefficiency = d_filter_efficiency;
            kfactor = d_kfactor;
            eventweight = d_weight_mc;
                
        nos[file_ii][j] += eventweight*(1000*crosssection*58.45*kfactor*filterefficiency)/sum_xAOD_weight[file_ii][j];
                
        if(j!=0){
            if(tau_pt<=35){
            pt_os[file_ii][j]->Fill(tau_pt,0.98*eventweight);
            met_os[file_ii][j]->Fill(met_pt,0.98*eventweight);
            eta_os[file_ii][j]->Fill(tau_eta,0.98*eventweight);
            phi_os[file_ii][j]->Fill(tau_phi,0.98*eventweight);
            rnn_os[file_ii][j]->Fill(rnn,0.98*eventweight);
            }//low pt
            if(tau_pt>35){
            pt_os[file_ii][j]->Fill(tau_pt,0.916*eventweight);
            met_os[file_ii][j]->Fill(met_pt,0.916*eventweight);
            eta_os[file_ii][j]->Fill(tau_eta,0.916*eventweight);
            phi_os[file_ii][j]->Fill(tau_phi,0.916*eventweight);
            rnn_os[file_ii][j]->Fill(rnn,0.916*eventweight);
            }//high pt
        } //if wlv
        else{
            pt_os[file_ii][j]->Fill(tau_pt,eventweight);
            met_os[file_ii][j]->Fill(met_pt,eventweight);
            eta_os[file_ii][j]->Fill(tau_eta,eventweight);
            phi_os[file_ii][j]->Fill(tau_phi,eventweight);
            rnn_os[file_ii][j]->Fill(rnn,eventweight);
        } //if  ztt
                
        }// SR
        }// -> for( entryos_ii )
    
        //ss
        int nentries_ss = Tss[file_ii]->GetEntries();
   //     cout<<"nentries_ss = "<<nentries_ss<<endl;
        for(int entryss_ii = 0; entryss_ii < nentries_ss; entryss_ii++){
                
        Tss[file_ii]->GetEntry(entryss_ii);

            tau_px = b_tau_0_p4->Px();
            tau_py = b_tau_0_p4->Py();
            tau_pz = b_tau_0_p4->Pz();
            tau_pt = b_tau_0_p4->Pt();
            tau_eta = b_tau_0_p4->Eta();
            tau_phi = b_tau_0_p4->Phi();
            tau_e = b_tau_0_p4->Energy();
            
            lep_px = b_lep_0_p4->Px();
            lep_py = b_lep_0_p4->Py();
            lep_pz = b_lep_0_p4->Pz();
            lep_e = b_lep_0_p4->Energy();
            lep_et = b_lep_0_p4->Et();
            lep_pt = b_lep_0_p4->Pt();
            lep_eta = b_lep_0_p4->Eta();
            lep_phi = b_lep_0_p4->Phi();
            
            met_px = b_met_reco_p4->Px();
            met_py = b_met_reco_p4->Py();
            met_pz = b_met_reco_p4->Pz();
            met_pt = b_met_reco_p4->Pt();
            met_e = b_met_reco_p4->Energy();
            
            TLorentzVector v1;
            v1.SetPxPyPzE(lep_px,lep_py,lep_pz,lep_e);
            TLorentzVector v2;
            v2.SetPxPyPzE(tau_px,tau_py,tau_pz,tau_e);
            TLorentzVector v3;
            v3.SetPxPyPzE(met_px,met_py,met_pz,met_e);
                
            rnn = b_tau_0_jet_rnn_score;
                          
            // Mt(muon,met)
            delta_phi = v1.DeltaPhi(v3);
            cos_phi = cos(delta_phi);
            mt = sqrt(2*met_e*lep_et*(1-cos_phi));
                          
            //  cos_phi(tau,met)+cos_phi(muon,met)
            phi_taumet = v2.DeltaPhi(v3);
            phi_mumet = v1.DeltaPhi(v3);
            cos2 = cos(phi_taumet)+cos(phi_mumet);
            
            // M(tau,muon)
            TLorentzVector v4 = v1 + v2;
            mass = v4.M();
                
            // SR
            if( mt<50 && cos2>-0.5 && mass>45 && mass<80 ){
                
               crosssection = b_AMI_cross_section;
               filterefficiency = b_filter_efficiency;
               kfactor = b_kfactor;
               eventweight = b_weight_mc;
                
           nss[file_ii][j] += eventweight*(1000*crosssection*58.45*kfactor*filterefficiency)/sum_xAOD_weight[file_ii][j];
            if(j!=0){
                if(tau_pt<=35){
                pt_ss[file_ii][j]->Fill(tau_pt,0.99*eventweight);
                met_ss[file_ii][j]->Fill(met_pt,0.99*eventweight);
                eta_ss[file_ii][j]->Fill(tau_eta,0.99*eventweight);
                phi_ss[file_ii][j]->Fill(tau_phi,0.99*eventweight);
                rnn_ss[file_ii][j]->Fill(rnn,0.99*eventweight);
                }      //low pt
                if(tau_pt>35){
                pt_ss[file_ii][j]->Fill(tau_pt,0.836*eventweight);
                met_ss[file_ii][j]->Fill(met_pt,0.836*eventweight);
                eta_ss[file_ii][j]->Fill(tau_eta,0.836*eventweight);
                phi_ss[file_ii][j]->Fill(tau_phi,0.836*eventweight);
                rnn_ss[file_ii][j]->Fill(rnn,0.836*eventweight);
                }      // high pt
            }//if wlv
            else{
                pt_ss[file_ii][j]->Fill(tau_pt,eventweight);
                met_ss[file_ii][j]->Fill(met_pt,eventweight);
                eta_ss[file_ii][j]->Fill(tau_eta,eventweight);
                phi_ss[file_ii][j]->Fill(tau_phi,eventweight);
                rnn_ss[file_ii][j]->Fill(rnn,eventweight);
            }// if ztt
                
            //low pt
                if(lep_pt<=50){
                    pt_excessive[file_ii][j]->Fill(tau_pt,0.145*eventweight);
                    met_excessive[file_ii][j]->Fill(met_pt,0.145*eventweight);
                    eta_excessive[file_ii][j]->Fill(tau_eta,0.145*eventweight);
                    phi_excessive[file_ii][j]->Fill(tau_phi,0.145*eventweight);
                    rnn_excessive[file_ii][j]->Fill(rnn,0.145*eventweight);
                }
            // high pt
                if(lep_pt>50){
                    pt_excessive[file_ii][j]->Fill(tau_pt,0.179*eventweight);
                    met_excessive[file_ii][j]->Fill(met_pt,0.179*eventweight);
                    eta_excessive[file_ii][j]->Fill(tau_eta,0.179*eventweight);
                    phi_excessive[file_ii][j]->Fill(tau_phi,0.179*eventweight);
                    rnn_excessive[file_ii][j]->Fill(rnn,0.179*eventweight);
                }
        
    }// SR
    }// -> for( entryss_ii )
     
    numbero[j] += nos[file_ii][j];
    numbers[j] += nss[file_ii][j];

   double scale = (1000*crosssection*58.45*kfactor*filterefficiency)/sum_xAOD_weight[file_ii][j];
  
    pt_os[file_ii][j]->Sumw2();
    met_os[file_ii][j]->Sumw2();
    eta_os[file_ii][j]->Sumw2();
    phi_os[file_ii][j]->Sumw2();
    rnn_os[file_ii][j]->Sumw2();
                    
    pt_ss[file_ii][j]->Sumw2();
    met_ss[file_ii][j]->Sumw2();
    eta_ss[file_ii][j]->Sumw2();
    phi_ss[file_ii][j]->Sumw2();
    rnn_ss[file_ii][j]->Sumw2();
            
    pt_excessive[file_ii][j]->Sumw2();
    met_excessive[file_ii][j]->Sumw2();
    eta_excessive[file_ii][j]->Sumw2();
    phi_excessive[file_ii][j]->Sumw2();
    rnn_excessive[file_ii][j]->Sumw2();
                    
//    cout<<"file_ii = "<<file_ii<<" hist get Sumw2"<<endl;
                
    pt_os[file_ii][j]->Scale(scale);
    eta_os[file_ii][j]->Scale(scale);
    phi_os[file_ii][j]->Scale(scale);
    met_os[file_ii][j]->Scale(scale);
    rnn_os[file_ii][j]->Scale(scale);
    pt_ss[file_ii][j]->Scale(scale);
    eta_ss[file_ii][j]->Scale(scale);
    phi_ss[file_ii][j]->Scale(scale);
    met_ss[file_ii][j]->Scale(scale);
    rnn_ss[file_ii][j]->Scale(scale);
            
    pt_excessive[file_ii][j]->Scale(scale);
    eta_excessive[file_ii][j]->Scale(scale);
    phi_excessive[file_ii][j]->Scale(scale);
    met_excessive[file_ii][j]->Scale(scale);
    rnn_excessive[file_ii][j]->Scale(scale);
    
    //treat overflow bin
      int nbin_os = pt_os[file_ii][j]->GetNbinsX();
      double val_OFBin_os = pt_os[file_ii][j]->GetBinContent(nbin_os+1);
      double err_OFBin_os = pt_os[file_ii][j]->GetBinError(nbin_os+1);
      double err_LastBin_os = pt_os[file_ii][j]->GetBinError(nbin_os);
      double err_LastBin_fixed_os = TMath::Sqrt((err_LastBin_os*err_LastBin_os)+(err_OFBin_os*err_OFBin_os));
      pt_os[file_ii][j]->AddBinContent(nbin_os,val_OFBin_os);
      pt_os[file_ii][j]->SetBinError(nbin_os,err_LastBin_fixed_os);
    
    int nbin_ss = pt_ss[file_ii][j]->GetNbinsX();
    double val_OFBin_ss = pt_ss[file_ii][j]->GetBinContent(nbin_ss+1);
    double err_OFBin_ss = pt_ss[file_ii][j]->GetBinError(nbin_ss+1);
    double err_LastBin_ss = pt_ss[file_ii][j]->GetBinError(nbin_ss);
    double err_LastBin_fixed_ss = TMath::Sqrt((err_LastBin_ss*err_LastBin_ss)+(err_OFBin_ss*err_OFBin_ss));
    pt_ss[file_ii][j]->AddBinContent(nbin_ss,val_OFBin_ss);
    pt_ss[file_ii][j]->SetBinError(nbin_ss,err_LastBin_fixed_ss);
            
    int nbin_excessive = pt_excessive[file_ii][j]->GetNbinsX();
    double val_OFBin_excessive = pt_excessive[file_ii][j]->GetBinContent(nbin_excessive+1);
    double err_OFBin_excessive = pt_excessive[file_ii][j]->GetBinError(nbin_excessive+1);
    double err_LastBin_excessive = pt_excessive[file_ii][j]->GetBinError(nbin_excessive);
    double err_LastBin_fixed_excessive = TMath::Sqrt((err_LastBin_excessive*err_LastBin_excessive)+(err_OFBin_excessive*err_OFBin_excessive));
    pt_excessive[file_ii][j]->AddBinContent(nbin_excessive,val_OFBin_excessive);
    pt_excessive[file_ii][j]->SetBinError(nbin_excessive,err_LastBin_fixed_excessive);
  
     
    //met
    int met_nbin_os = met_os[file_ii][j]->GetNbinsX();
    double met_val_OFBin_os = met_os[file_ii][j]->GetBinContent(met_nbin_os+1);
    double met_err_OFBin_os = met_os[file_ii][j]->GetBinError(met_nbin_os+1);
    double met_err_LastBin_os = met_os[file_ii][j]->GetBinError(met_nbin_os);
    double met_err_LastBin_fixed_os = TMath::Sqrt((met_err_LastBin_os*met_err_LastBin_os)+(met_err_OFBin_os*met_err_OFBin_os));
    met_os[file_ii][j]->AddBinContent(met_nbin_os,met_val_OFBin_os);
    met_os[file_ii][j]->SetBinError(met_nbin_os,met_err_LastBin_fixed_os);
                  
    int met_nbin_ss = met_ss[file_ii][j]->GetNbinsX();
    double met_val_OFBin_ss = met_ss[file_ii][j]->GetBinContent(met_nbin_ss+1);
    double met_err_OFBin_ss = met_ss[file_ii][j]->GetBinError(met_nbin_ss+1);
    double met_err_LastBin_ss = met_ss[file_ii][j]->GetBinError(met_nbin_ss);
    double met_err_LastBin_fixed_ss = TMath::Sqrt((met_err_LastBin_ss*met_err_LastBin_ss)+(met_err_OFBin_ss*met_err_OFBin_ss));
    met_ss[file_ii][j]->AddBinContent(met_nbin_ss,met_val_OFBin_ss);
    met_ss[file_ii][j]->SetBinError(met_nbin_ss,met_err_LastBin_fixed_ss);
            
    int met_nbin_excessive = met_excessive[file_ii][j]->GetNbinsX();
    double met_val_OFBin_excessive = met_excessive[file_ii][j]->GetBinContent(met_nbin_excessive+1);
    double met_err_OFBin_excessive = met_excessive[file_ii][j]->GetBinError(met_nbin_excessive+1);
    double met_err_LastBin_excessive = met_excessive[file_ii][j]->GetBinError(met_nbin_excessive);
    double met_err_LastBin_fixed_excessive = TMath::Sqrt((met_err_LastBin_excessive*met_err_LastBin_excessive)+(met_err_OFBin_excessive*met_err_OFBin_excessive));
    met_excessive[file_ii][j]->AddBinContent(met_nbin_excessive,met_val_OFBin_excessive);
    met_excessive[file_ii][j]->SetBinError(met_nbin_excessive,met_err_LastBin_fixed_excessive);
    
                
    pt0[file_ii][j]->Add(pt_os[file_ii][j],pt_ss[file_ii][j],1,-1);
    eta0[file_ii][j]->Add(eta_os[file_ii][j],eta_ss[file_ii][j],1,-1);
    phi0[file_ii][j]->Add(phi_os[file_ii][j],phi_ss[file_ii][j],1,-1);
    met0[file_ii][j]->Add(met_os[file_ii][j],met_ss[file_ii][j],1,-1);
    rnn_score0[file_ii][j]->Add(rnn_os[file_ii][j],rnn_ss[file_ii][j],1,-1);
    
    pt[j]->Add(pt0[file_ii][j]);
    eta[j]->Add(eta0[file_ii][j]);
    phi[j]->Add(phi0[file_ii][j]);
    met[j]->Add(met0[file_ii][j]);
    rnn_score[j]->Add(rnn_score0[file_ii][j]);
    
    pt_ex[j]->Add(pt_excessive[file_ii][j]);
    eta_ex[j]->Add(eta_excessive[file_ii][j]);
    phi_ex[j]->Add(phi_excessive[file_ii][j]);
    met_ex[j]->Add(met_excessive[file_ii][j]);
    rnn_ex[j]->Add(rnn_excessive[file_ii][j]);
       
    }  //  for ( file_ii )
            
    cout<<"nos = "<<fixed<<numbero[j]<<"\nnss = "<<fixed<<numbers[j]<<endl;
  
    fout[j] = new TFile(out_file[j].str().c_str(),"recreate");
    cout<<out_file[j].str().c_str()<<" recreate\n"<<endl;
    pt[j]->Write();
    eta[j]->Write();
    phi[j]->Write();
    met[j]->Write();
    rnn_score[j]->Write();
            
    pt_ex[j]->Write();
    eta_ex[j]->Write();
    phi_ex[j]->Write();
    met_ex[j]->Write();
    rnn_ex[j]->Write();
            
    fout[j]->Close();
    
    }  //  for j < 4
    
    
    TFile *fin1 = new TFile("wen18.root", "read");
    TFile *fin2 = new TFile("wmn18.root", "read");
    TFile *fin3 = new TFile("wtn18.root", "read");
   
    //wen
    TH1D *wen1 = (TH1D*)fin1->Get("pt");
    TH1D *wen2 = (TH1D*)fin1->Get("eta");
    TH1D *wen3 = (TH1D*)fin1->Get("phi");
    TH1D *wen4 = (TH1D*)fin1->Get("met");
    TH1D *wen5 = (TH1D*)fin1->Get("rnn");
    
    TH1D *wen6 = (TH1D*)fin1->Get("pt_ex");
    TH1D *wen7 = (TH1D*)fin1->Get("eta_ex");
    TH1D *wen8 = (TH1D*)fin1->Get("phi_ex");
    TH1D *wen9 = (TH1D*)fin1->Get("met_ex");
    TH1D *wen10 = (TH1D*)fin1->Get("rnn_ex");
    
    //wmn
    TH1D *wmn1 = (TH1D*)fin2->Get("pt");
    TH1D *wmn2 = (TH1D*)fin2->Get("eta");
    TH1D *wmn3 = (TH1D*)fin2->Get("phi");
    TH1D *wmn4 = (TH1D*)fin2->Get("met");
    TH1D *wmn5 = (TH1D*)fin2->Get("rnn");
    
    TH1D *wmn6 = (TH1D*)fin2->Get("pt_ex");
    TH1D *wmn7 = (TH1D*)fin2->Get("eta_ex");
    TH1D *wmn8 = (TH1D*)fin2->Get("phi_ex");
    TH1D *wmn9 = (TH1D*)fin2->Get("met_ex");
    TH1D *wmn10 = (TH1D*)fin2->Get("rnn_ex");
    
    //wtn
    TH1D *wtn1 = (TH1D*)fin3->Get("pt");
    TH1D *wtn2 = (TH1D*)fin3->Get("eta");
    TH1D *wtn3 = (TH1D*)fin3->Get("phi");
    TH1D *wtn4 = (TH1D*)fin3->Get("met");
    TH1D *wtn5 = (TH1D*)fin3->Get("rnn");
    
    TH1D *wtn6 = (TH1D*)fin3->Get("pt_ex");
    TH1D *wtn7 = (TH1D*)fin3->Get("eta_ex");
    TH1D *wtn8 = (TH1D*)fin3->Get("phi_ex");
    TH1D *wtn9 = (TH1D*)fin3->Get("met_ex");
    TH1D *wtn10 = (TH1D*)fin3->Get("rnn_ex");

    // pt
    TH1D* wlv_pt = new TH1D("wlv_pt",";Tau Pt[GeV];Events",20,20,70);
    wlv_pt->Add(wen1);
    wlv_pt->Add(wtn1);
    wlv_pt->Add(wmn1);
   
    // eta
    TH1D* wlv_eta = new TH1D("wlv_eta",";tau eta;Events",20,-2.5,2.5);
    wlv_eta->Add(wen2);
    wlv_eta->Add(wtn2);
    wlv_eta->Add(wmn2);
    
    // phi
    TH1D* wlv_phi = new TH1D("wlv_phi",";tau phi;Events",20,-3.2,3.2);
    wlv_phi->Add(wen3);
    wlv_phi->Add(wtn3);
    wlv_phi->Add(wmn3);
    
    // met
    TH1D* wlv_met = new TH1D("wlv_met",";met[GeV];Events",20,0,100);
    wlv_met->Add(wen4);
    wlv_met->Add(wtn4);
    wlv_met->Add(wmn4);
    
    // rnn
    TH1D* wlv_rnn = new TH1D("wlv_rnn",";Jet RNN Score;Events",20,0.8,1);
    wlv_rnn->Add(wen5);
    wlv_rnn->Add(wtn5);
    wlv_rnn->Add(wmn5);
    
    // ptex
    TH1D* wlv_ptex = new TH1D("wlv_ptex",";Tau Pt[GeV];Events",20,20,70);
    wlv_ptex->Add(wen6);
    wlv_ptex->Add(wtn6);
    wlv_ptex->Add(wmn6);
   
    // etaex
    TH1D* wlv_etaex = new TH1D("wlv_etaex",";tau eta;Events",20,-2.5,2.5);
    wlv_etaex->Add(wen7);
    wlv_etaex->Add(wtn7);
    wlv_etaex->Add(wmn7);
    
    // phiex
    TH1D* wlv_phiex = new TH1D("wlv_phiex",";tau phi;Events",20,-3.2,3.2);
    wlv_phiex->Add(wen8);
    wlv_phiex->Add(wtn8);
    wlv_phiex->Add(wmn8);
    
    // metex
    TH1D* wlv_metex = new TH1D("wlv_metex",";met[GeV];Events",20,0,100);
    wlv_metex->Add(wen9);
    wlv_metex->Add(wtn9);
    wlv_metex->Add(wmn9);
    
    // rnnex
    TH1D* wlv_rnnex = new TH1D("wlv_rnnex",";Jet RNN Score;Events",20,0.8,1);
    wlv_rnnex->Add(wen10);
    wlv_rnnex->Add(wtn10);
    wlv_rnnex->Add(wmn10);
    
    
    TFile *fout_wlv = new TFile("wlv18.root", "recreate");
    wlv_pt->Write();
    wlv_eta->Write();
    wlv_phi->Write();
    wlv_met->Write();
    wlv_rnn->Write();
    
    wlv_ptex->Write();
    wlv_etaex->Write();
    wlv_phiex->Write();
    wlv_metex->Write();
    wlv_rnnex->Write();
    
    fout_wlv->Close();
 
    cout<<"over"<<endl;
}
