#include <iostream>
#include<fstream>
#include <TLorentzVector.h>
#include <TFile.h>
#include <TTree.h>
using namespace std;
// HLT_tau25_mediumRNN_tracktwoMVA
void py_general()
{
    const int nFiles = 3;
    double sum_xAOD_weight[nFiles];
    double xbins[] = {25,28,30,32,34,36,39,43,52,64,80,100,150,300};
    
    // os
    double_t d_weight_mc;
    double_t d_kfactor;
    double_t d_filter_efficiency;
    double_t d_AMI_cross_section;
    UInt_t d_tau_0_n_charged_tracks;
    UInt_t  d_tau_0_trig_HLT_tau25_mediumRNN_tracktwoMVA;
    
    TLorentzVector *d_tau_0_p4;
    TLorentzVector *d_lep_0_p4;
    TLorentzVector *d_met_reco_p4;
    
    //ss
    double_t b_weight_mc;
    double_t b_kfactor;
    double_t b_filter_efficiency;
    double_t b_AMI_cross_section;
    UInt_t b_tau_0_n_charged_tracks;
    UInt_t  b_tau_0_trig_HLT_tau25_mediumRNN_tracktwoMVA;
    
    TLorentzVector *b_tau_0_p4;
    TLorentzVector *b_lep_0_p4;
    TLorentzVector *b_met_reco_p4;
    
    double eventweight,kfactor,filterefficiency,crosssection;
    double tau_px,tau_py,tau_pz,tau_e,tau_pt,tau_eta,tau_phi;
    double lep_px,lep_py,lep_pz,lep_e,lep_et,lep_pt,lep_eta,lep_phi;
    double met_px,met_py,met_pz,met_pt,met_e;
    double delta_phi,cos_phi,mt;  // phi(muon,met)
    double phi_taumet,phi_mumet,cos2;
    double mass,phi_taumu,eta_taumu;
    
    stringstream os_file[nFiles];
    stringstream ss_file[nFiles];
    stringstream out_file[nFiles];
    
    TFile *finos[nFiles];
    TFile *finss[nFiles];
    TFile *fout[nFiles];
    
    TTree *Tos[nFiles];
    TTree *Tss[nFiles];
    
    TH1D *h_metadata[nFiles];
    
    TH1D *h1_os[nFiles];
    TH1D *h1_ss[nFiles];
    TH1D *h1[nFiles];
    
    TH1D *h2_os[nFiles];
    TH1D *h2_ss[nFiles];
    TH1D *h2[nFiles];
    
    TH1D *h3_os[nFiles];
    TH1D *h3_ss[nFiles];
    TH1D *h3[nFiles];
    
    TH1D *h4_os[nFiles];
    TH1D *h4_ss[nFiles];
    TH1D *h4[nFiles];

    TH1D *h5_os[nFiles];
    TH1D *h5_ss[nFiles];
    TH1D *h5[nFiles];
    
    TH1D *h6_os[nFiles];
    TH1D *h6_ss[nFiles];
    TH1D *h6[nFiles];
 
    os_file[0]<<"/Users/dracarys/Desktop/kadai/basecut/18/tt_cutos.root";
    os_file[1]<<"/Users/dracarys/Desktop/kadai/basecut/18/zmm_cutos.root";
    os_file[2]<<"/Users/dracarys/Desktop/kadai/basecut/18/zee_cutos.root";
    
    ss_file[0]<<"/Users/dracarys/Desktop/kadai/basecut/18/tt_cutss.root";
    ss_file[1]<<"/Users/dracarys/Desktop/kadai/basecut/18/zmm_cutss.root";
    ss_file[2]<<"/Users/dracarys/Desktop/kadai/basecut/18/zee_cutss.root";
    
    out_file[0]<<"tt_general.root";
    out_file[1]<<"zmm_general.root";
    out_file[2]<<"zee_general.root";
    
    for(int file_ii = 0; file_ii < nFiles; file_ii++){
        
        //inclusive
        h1_os[file_ii] = new TH1D("triggeron_os","Tau Pt ;Tau Pt[GeV];Events",13,xbins);
        h1_ss[file_ii] = new TH1D("triggeron_ss","Tau Pt ;Tau Pt[GeV];Events",13,xbins);
        h1[file_ii] = new TH1D("triggeron","Tau Pt ;Tau Pt[GeV];Events",13,xbins);
        
        h4_os[file_ii] = new TH1D("triggeroff_os","Tau Pt ;Tau Pt[GeV];Events",13,xbins);
        h4_ss[file_ii] = new TH1D("triggeroff_ss","Tau Pt ;Tau Pt[GeV];Events",13,xbins);
        h4[file_ii] = new TH1D("triggeroff","Tau Pt ;Tau Pt[GeV];Events",13,xbins);
        
        // 1p
        h2_os[file_ii] = new TH1D("triggeron1p_os","Tau Pt 1p;Tau Pt[GeV];Events",13,xbins);
        h2_ss[file_ii] = new TH1D("triggeron1p_ss","Tau Pt 1p;Tau Pt[GeV];Event",13,xbins);
        h2[file_ii] = new TH1D("triggeron1p","Tau Pt 1p;Tau Pt[GeV];Events",13,xbins);
        
        h5_os[file_ii] = new TH1D("triggeroff1p_os","Tau Pt 1p;Tau Pt[GeV];Events",13,xbins);
        h5_ss[file_ii] = new TH1D("triggeroff1p_ss","Tau Pt 1p;Tau Pt[GeV];Event",13,xbins);
        h5[file_ii] = new TH1D("triggeroff1p","Tau Pt 1p;Tau Pt[GeV];Events",13,xbins);
        
        // 3p
        h3_os[file_ii] = new TH1D("triggeron3p_os","Tau Pt 3p;Tau Pt[GeV];Events",13,xbins);
        h3_ss[file_ii] = new TH1D("triggeron3p_ss","Tau Pt 3p;Tau Pt[GeV];Event",13,xbins);
        h3[file_ii] = new TH1D("triggeron3p","Tau Pt 3p;Tau Pt[GeV];Events",13,xbins);
        
        h6_os[file_ii] = new TH1D("triggeroff3p_os","Tau Pt 3p;Tau Pt[GeV];Events",13,xbins);
        h6_ss[file_ii] = new TH1D("triggeroff3p_ss","Tau Pt 3p;Tau Pt[GeV];Event",13,xbins);
        h6[file_ii] = new TH1D("triggeroff3p","Tau Pt 3p;Tau Pt[GeV];Events",13,xbins);
        
        h1[file_ii]->GetXaxis()->SetRangeUser(20,300);
        h2[file_ii]->GetXaxis()->SetRangeUser(20,300);
        h3[file_ii]->GetXaxis()->SetRangeUser(20,300);
        h4[file_ii]->GetXaxis()->SetRangeUser(20,300);
        h5[file_ii]->GetXaxis()->SetRangeUser(20,300);
        h6[file_ii]->GetXaxis()->SetRangeUser(20,300);
       
        finos[file_ii] = new TFile(os_file[file_ii].str().c_str(), "read");
        finss[file_ii] = new TFile(ss_file[file_ii].str().c_str(), "read");
        
        cout<<"file_ii ="<<file_ii<<"\n"
            <<os_file[file_ii].str().c_str()<<" read"<<endl;
        cout<<ss_file[file_ii].str().c_str()<<" read"<<endl;
        // Σ xAOD event weight
        h_metadata[file_ii] = (TH1D*)finos[file_ii]->Get("h_metadata");
        sum_xAOD_weight[file_ii] = h_metadata[file_ii]->GetBinContent(8);
        // Σ xAOD event weight  over
    
        //os
        Tos[file_ii] = (TTree*)finos[file_ii]->Get("NOMINAL");
        Tos[file_ii]->SetBranchStatus("*",0);
        Tos[file_ii]->SetBranchStatus("tau_0_p4",1);
        Tos[file_ii]->SetBranchStatus("lep_0_p4",1);
        Tos[file_ii]->SetBranchStatus("met_reco_p4",1);
        Tos[file_ii]->SetBranchStatus("AMI_cross_section",1);
        Tos[file_ii]->SetBranchStatus("kfactor",1);
        Tos[file_ii]->SetBranchStatus("filter_efficiency",1);
        Tos[file_ii]->SetBranchStatus("weight_mc",1);
        Tos[file_ii]->SetBranchStatus("tau_0_n_charged_tracks",1);
        Tos[file_ii]->SetBranchStatus("tau_0_trig_HLT_tau25_mediumRNN_tracktwoMVA",1);
    
        d_tau_0_p4 =0;  // ******   初期化
        d_lep_0_p4 =0;
        d_met_reco_p4 =0;
        Tos[file_ii]->SetBranchAddress("tau_0_p4",&d_tau_0_p4);
        Tos[file_ii]->SetBranchAddress("lep_0_p4",&d_lep_0_p4);
        Tos[file_ii]->SetBranchAddress("met_reco_p4",&d_met_reco_p4);
        Tos[file_ii]->SetBranchAddress("AMI_cross_section",&d_AMI_cross_section);
        Tos[file_ii]->SetBranchAddress("kfactor",&d_kfactor);
        Tos[file_ii]->SetBranchAddress("filter_efficiency",&d_filter_efficiency);
        Tos[file_ii]->SetBranchAddress("weight_mc",&d_weight_mc);
        Tos[file_ii]->SetBranchAddress("tau_0_n_charged_tracks",&d_tau_0_n_charged_tracks);
        Tos[file_ii]->SetBranchAddress("tau_0_trig_HLT_tau25_mediumRNN_tracktwoMVA",&d_tau_0_trig_HLT_tau25_mediumRNN_tracktwoMVA);
   
    
        //ss
        Tss[file_ii] = (TTree*)finss[file_ii]->Get("NOMINAL");
        Tss[file_ii]->SetBranchStatus("*",0);
        Tss[file_ii]->SetBranchStatus("tau_0_p4",1);
        Tss[file_ii]->SetBranchStatus("lep_0_p4",1);
        Tss[file_ii]->SetBranchStatus("met_reco_p4",1);
        Tss[file_ii]->SetBranchStatus("AMI_cross_section",1);
        Tss[file_ii]->SetBranchStatus("kfactor",1);
        Tss[file_ii]->SetBranchStatus("filter_efficiency",1);
        Tss[file_ii]->SetBranchStatus("weight_mc",1);
        Tss[file_ii]->SetBranchStatus("tau_0_n_charged_tracks",1);
        Tss[file_ii]->SetBranchStatus("tau_0_trig_HLT_tau25_mediumRNN_tracktwoMVA",1);
    
        b_tau_0_p4 =0;  // ******   初期化
        b_lep_0_p4 =0;
        b_met_reco_p4 =0;
        Tss[file_ii]->SetBranchAddress("tau_0_p4",&b_tau_0_p4);
        Tss[file_ii]->SetBranchAddress("lep_0_p4",&b_lep_0_p4);
        Tss[file_ii]->SetBranchAddress("met_reco_p4",&b_met_reco_p4);
        Tss[file_ii]->SetBranchAddress("AMI_cross_section",&b_AMI_cross_section);
        Tss[file_ii]->SetBranchAddress("kfactor",&b_kfactor);
        Tss[file_ii]->SetBranchAddress("filter_efficiency",&b_filter_efficiency);
        Tss[file_ii]->SetBranchAddress("weight_mc",&b_weight_mc);
        Tss[file_ii]->SetBranchAddress("tau_0_n_charged_tracks",&b_tau_0_n_charged_tracks);
        Tss[file_ii]->SetBranchAddress("tau_0_trig_HLT_tau25_mediumRNN_tracktwoMVA",&b_tau_0_trig_HLT_tau25_mediumRNN_tracktwoMVA);
      
        
        // os
        int nentries_os = Tos[file_ii]->GetEntries();
        for(int entryos_ii = 0; entryos_ii < nentries_os; entryos_ii++){
           
        Tos[file_ii]->GetEntry(entryos_ii);
          
        tau_px = d_tau_0_p4->Px();
        tau_py = d_tau_0_p4->Py();
        tau_pz = d_tau_0_p4->Pz();
        tau_pt = d_tau_0_p4->Pt();   
        tau_eta = d_tau_0_p4->Eta();
        tau_phi = d_tau_0_p4->Phi();
        tau_e = d_tau_0_p4->Energy();
        
        lep_px = d_lep_0_p4->Px();
        lep_py = d_lep_0_p4->Py();
        lep_pz = d_lep_0_p4->Pz();
        lep_e = d_lep_0_p4->Energy();
        lep_et = d_lep_0_p4->Et();
        lep_pt = d_lep_0_p4->Pt();
        lep_eta = d_lep_0_p4->Eta();
        lep_phi = d_lep_0_p4->Phi();
        
        met_px = d_met_reco_p4->Px();
        met_py = d_met_reco_p4->Py();
        met_pz = d_met_reco_p4->Pz();
        met_pt = d_met_reco_p4->Pt();
        met_e = d_met_reco_p4->Energy();
            
        TLorentzVector v1;
        v1.SetPxPyPzE(lep_px,lep_py,lep_pz,lep_e);
        TLorentzVector v2;
        v2.SetPxPyPzE(tau_px,tau_py,tau_pz,tau_e);
        TLorentzVector v3;
        v3.SetPxPyPzE(met_px,met_py,met_pz,met_e);
                      
        // Mt(muon,met)
        delta_phi = v1.DeltaPhi(v3);
        cos_phi = cos(delta_phi);
        mt = sqrt(2*met_e*lep_et*(1-cos_phi));
                      
        //  cos_phi(tau,met)+cos_phi(muon,met)
        phi_taumet = v2.DeltaPhi(v3);
        phi_mumet = v1.DeltaPhi(v3);
        cos2 = cos(phi_taumet)+cos(phi_mumet);
            
        // M(tau,muon)
        TLorentzVector v4 = v1 + v2;
        mass = v4.M();
      
        // SR
        if(mt<50 && cos2>-0.5 && mass>45 && mass<80){
            
            crosssection = d_AMI_cross_section;
            filterefficiency = d_filter_efficiency;
            kfactor = d_kfactor;
            eventweight = d_weight_mc;
            
            // inclusive
            h4_os[file_ii]->Fill(tau_pt,eventweight);
            // 1prong
            if(d_tau_0_n_charged_tracks==1)h5_os[file_ii]->Fill(tau_pt,eventweight);
            // 3pong
            if(d_tau_0_n_charged_tracks==3)h6_os[file_ii]->Fill(tau_pt,eventweight);
            
            if(d_tau_0_trig_HLT_tau25_mediumRNN_tracktwoMVA==1){
      
            // inclusive
            h1_os[file_ii]->Fill(tau_pt,eventweight);
            // 1prong
            if(d_tau_0_n_charged_tracks==1)h2_os[file_ii]->Fill(tau_pt,eventweight);
            // 3pong
            if(d_tau_0_n_charged_tracks==3)h3_os[file_ii]->Fill(tau_pt,eventweight);
        }// tau trigger
        }// SR
 
    }//for entryos_ii
    
    //ss
        int nentries_ss = Tss[file_ii]->GetEntries();
        for(int entryss_ii = 0; entryss_ii < nentries_ss; entryss_ii++){
                
        Tss[file_ii]->GetEntry(entryss_ii);
            
        tau_px = b_tau_0_p4->Px();
        tau_py = b_tau_0_p4->Py();
        tau_pz = b_tau_0_p4->Pz();
        tau_pt = b_tau_0_p4->Pt();
        tau_eta = b_tau_0_p4->Eta();
        tau_phi = b_tau_0_p4->Phi();
        tau_e = b_tau_0_p4->Energy();
       
        lep_px = b_lep_0_p4->Px();
        lep_py = b_lep_0_p4->Py();
        lep_pz = b_lep_0_p4->Pz();
        lep_e = b_lep_0_p4->Energy();
        lep_et = b_lep_0_p4->Et();
        lep_pt = b_lep_0_p4->Pt();
        lep_eta = b_lep_0_p4->Eta();
        lep_phi = b_lep_0_p4->Phi();
        
        met_px = b_met_reco_p4->Px();
        met_py = b_met_reco_p4->Py();
        met_pz = b_met_reco_p4->Pz();
        met_pt = b_met_reco_p4->Pt();
        met_e = b_met_reco_p4->Energy();
        
        TLorentzVector v1;
        v1.SetPxPyPzE(lep_px,lep_py,lep_pz,lep_e);
        TLorentzVector v2;
        v2.SetPxPyPzE(tau_px,tau_py,tau_pz,tau_e);
        TLorentzVector v3;
        v3.SetPxPyPzE(met_px,met_py,met_pz,met_e);
     
        // Mt(muon,met)
        delta_phi = v1.DeltaPhi(v3);
        cos_phi = cos(delta_phi);
        mt = sqrt(2*met_e*lep_et*(1-cos_phi));
                      
        //  cos_phi(tau,met)+cos_phi(muon,met)
        phi_taumet = v2.DeltaPhi(v3);
        phi_mumet = v1.DeltaPhi(v3);
        cos2 = cos(phi_taumet)+cos(phi_mumet);
        
        // M(tau,muon)
        TLorentzVector v4 = v1 + v2;
        mass = v4.M();

        // SR
        if(mt<50 && cos2>-0.5 && mass>45 && mass<80){
          
           crosssection = b_AMI_cross_section;
           filterefficiency = b_filter_efficiency;
           kfactor = b_kfactor;
           eventweight = b_weight_mc;
           
            // inclusive
            h4_ss[file_ii]->Fill(tau_pt,eventweight);
            // 1prong
            if(b_tau_0_n_charged_tracks==1)h5_ss[file_ii]->Fill(tau_pt,eventweight);
            // 3pong
            if(b_tau_0_n_charged_tracks==3)h6_ss[file_ii]->Fill(tau_pt,eventweight);

           if(b_tau_0_trig_HLT_tau25_mediumRNN_tracktwoMVA==1){
      
           // inclusive
           h1_ss[file_ii]->Fill(tau_pt,eventweight);
           // 1prong
           if(b_tau_0_n_charged_tracks==1)h2_ss[file_ii]->Fill(tau_pt,eventweight);
           // 3pong
           if(b_tau_0_n_charged_tracks==3)h3_ss[file_ii]->Fill(tau_pt,eventweight);
           } // tau trigger
        }// SR
    }//for entryss_ii

        h1[file_ii]->Sumw2();
        h2[file_ii]->Sumw2();
        h3[file_ii]->Sumw2();
        h4[file_ii]->Sumw2();
        h5[file_ii]->Sumw2();
        h6[file_ii]->Sumw2();
        
        h1[file_ii]->Add(h1_os[file_ii],h1_ss[file_ii],1,-1);
        h2[file_ii]->Add(h2_os[file_ii],h2_ss[file_ii],1,-1);
        h3[file_ii]->Add(h3_os[file_ii],h3_ss[file_ii],1,-1);
        h4[file_ii]->Add(h4_os[file_ii],h4_ss[file_ii],1,-1);
        h5[file_ii]->Add(h5_os[file_ii],h5_ss[file_ii],1,-1);
        h6[file_ii]->Add(h6_os[file_ii],h6_ss[file_ii],1,-1);
        
        double scale = (1000*crosssection*58.45*kfactor*filterefficiency)/sum_xAOD_weight[file_ii];
      
        h1[file_ii]->Scale(scale);
        h2[file_ii]->Scale(scale);
        h3[file_ii]->Scale(scale);
        h4[file_ii]->Scale(scale);
        h5[file_ii]->Scale(scale);
        h6[file_ii]->Scale(scale);
      
 
        //treat overflow bin  inclusive
        int nbin_1 = h1[file_ii]->GetNbinsX();
        double val_OFBin_1 = h1[file_ii]->GetBinContent(nbin_1+1);
        double err_OFBin_1 = h1[file_ii]->GetBinError(nbin_1+1);
        double err_LastBin_1 = h1[file_ii]->GetBinError(nbin_1);
        double err_LastBin_fixed_1 = TMath::Sqrt((err_LastBin_1 * err_LastBin_1)+(err_OFBin_1 * err_OFBin_1));
        h1[file_ii]->AddBinContent(nbin_1,val_OFBin_1);
        h1[file_ii]->SetBinError(nbin_1,err_LastBin_fixed_1);
        
        int nbin_2 = h2[file_ii]->GetNbinsX();
        double val_OFBin_2 = h2[file_ii]->GetBinContent(nbin_2+1);
        double err_OFBin_2 = h2[file_ii]->GetBinError(nbin_2+1);
        double err_LastBin_2 = h2[file_ii]->GetBinError(nbin_2);
        double err_LastBin_fixed_2 = TMath::Sqrt((err_LastBin_2 * err_LastBin_2)+(err_OFBin_2 * err_OFBin_2));
        h2[file_ii]->AddBinContent(nbin_2,val_OFBin_2);
        h2[file_ii]->SetBinError(nbin_2,err_LastBin_fixed_2);
        
        int nbin_3 = h3[file_ii]->GetNbinsX();
        double val_OFBin_3 = h3[file_ii]->GetBinContent(nbin_3+1);
        double err_OFBin_3 = h3[file_ii]->GetBinError(nbin_3+1);
        double err_LastBin_3 = h3[file_ii]->GetBinError(nbin_3);
        double err_LastBin_fixed_3 = TMath::Sqrt((err_LastBin_3 * err_LastBin_3)+(err_OFBin_3 * err_OFBin_3));
        h3[file_ii]->AddBinContent(nbin_3,val_OFBin_3);
        h3[file_ii]->SetBinError(nbin_3,err_LastBin_fixed_3);
        
        int nbin_4 = h4[file_ii]->GetNbinsX();
        double val_OFBin_4 = h4[file_ii]->GetBinContent(nbin_4+1);
        double err_OFBin_4 = h4[file_ii]->GetBinError(nbin_4+1);
        double err_LastBin_4 = h4[file_ii]->GetBinError(nbin_4);
        double err_LastBin_fixed_4 = TMath::Sqrt((err_LastBin_4 * err_LastBin_4)+(err_OFBin_4 * err_OFBin_4));
        h4[file_ii]->AddBinContent(nbin_4,val_OFBin_4);
        h4[file_ii]->SetBinError(nbin_4,err_LastBin_fixed_4);
        
        int nbin_5 = h5[file_ii]->GetNbinsX();
        double val_OFBin_5 = h5[file_ii]->GetBinContent(nbin_5+1);
        double err_OFBin_5 = h5[file_ii]->GetBinError(nbin_5+1);
        double err_LastBin_5 = h5[file_ii]->GetBinError(nbin_5);
        double err_LastBin_fixed_5 = TMath::Sqrt((err_LastBin_5 * err_LastBin_5)+(err_OFBin_5 * err_OFBin_5));
        h5[file_ii]->AddBinContent(nbin_5,val_OFBin_5);
        h5[file_ii]->SetBinError(nbin_5,err_LastBin_fixed_5);
        
        int nbin_6 = h6[file_ii]->GetNbinsX();
        double val_OFBin_6 = h6[file_ii]->GetBinContent(nbin_6+1);
        double err_OFBin_6 = h6[file_ii]->GetBinError(nbin_6+1);
        double err_LastBin_6 = h6[file_ii]->GetBinError(nbin_6);
        double err_LastBin_fixed_6 = TMath::Sqrt((err_LastBin_6 * err_LastBin_6)+(err_OFBin_6 * err_OFBin_6));
        h6[file_ii]->AddBinContent(nbin_6,val_OFBin_6);
        h6[file_ii]->SetBinError(nbin_6,err_LastBin_fixed_6);
  
    
        fout[file_ii] = new TFile(out_file[file_ii].str().c_str(),"recreate");
        cout<<out_file[file_ii].str().c_str()<<" recreate\n"<<endl;
            
        h1[file_ii]->Write();
        h2[file_ii]->Write();
        h3[file_ii]->Write();
        h4[file_ii]->Write();
        h5[file_ii]->Write();
        h6[file_ii]->Write();
        
        fout[file_ii]->Close();
        } // for  file_ii
     
        TFile *fin1 = new TFile("zmm_general.root", "read");
        TFile *fin2 = new TFile("zee_general.root", "read");
        
        TH1D *zmm1 = (TH1D*)fin1->Get("triggeron");
        TH1D *zmm2 = (TH1D*)fin1->Get("triggeron1p");
        TH1D *zmm3 = (TH1D*)fin1->Get("triggeron3p");
        TH1D *zmm4 = (TH1D*)fin1->Get("triggeroff");
        TH1D *zmm5 = (TH1D*)fin1->Get("triggeroff1p");
        TH1D *zmm6 = (TH1D*)fin1->Get("triggeroff3p");
        
        TH1D *zee1 = (TH1D*)fin2->Get("triggeron");
        TH1D *zee2 = (TH1D*)fin2->Get("triggeron1p");
        TH1D *zee3 = (TH1D*)fin2->Get("triggeron3p");
        TH1D *zee4 = (TH1D*)fin2->Get("triggeroff");
        TH1D *zee5 = (TH1D*)fin2->Get("triggeroff1p");
        TH1D *zee6 = (TH1D*)fin2->Get("triggeroff3p");
        
    
        TH1D* zll_1 = new TH1D("triggeron","Tau Pt;Tau Pt[GeV];Events",13,xbins);
        zll_1->Add(zmm1);
        zll_1->Add(zee1);
    
        TH1D* zll_2 = new TH1D("triggeron1p","Tau Pt 1p;Tau Pt[GeV];Events",13,xbins);
        zll_2->Add(zmm2);
        zll_2->Add(zee2);
    
        TH1D* zll_3 =  new TH1D("triggeron3p","Tau Pt 3p;Tau Pt[GeV];Events",13,xbins);
        zll_3->Add(zmm3);
        zll_3->Add(zee3);
    
        TH1D* zll_4 = new TH1D("triggeroff","Tau Pt;Tau Pt[GeV];Events",13,xbins);
        zll_4->Add(zmm4);
        zll_4->Add(zee4);

        TH1D* zll_5 = new TH1D("triggeroff1p","Tau Pt 1p;Tau Pt[GeV];Events",13,xbins);
        zll_5->Add(zmm5);
        zll_5->Add(zee5);

        TH1D* zll_6 =  new TH1D("triggeroff3p","Tau Pt 3p;Tau Pt[GeV];Events",13,xbins);
        zll_6->Add(zmm6);
        zll_6->Add(zee6);
  

        TFile *fout_zll = new TFile("zll_general.root", "recreate");
        zll_1->Write();
        zll_2->Write();
        zll_3->Write();
        zll_4->Write();
        zll_5->Write();
        zll_6->Write();
        fout_zll->Close();

        }
