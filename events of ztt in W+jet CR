#include <iostream>
#include<fstream>
#include <TLorentzVector.h>
#include <TFile.h>
#include <TTree.h>
using namespace std;
// with trigger
void  ztt_k()
{
    const int nFiles = 14;
    double sum_xAOD_weight[nFiles];
    double scale[nFiles];
    
    double elo[nFiles];
    double el1o[nFiles];
    double el3o[nFiles];
    double eho[nFiles];
    double eh1o[nFiles];
    double eh3o[nFiles];
    double els[nFiles];
    double el1s[nFiles];
    double el3s[nFiles];
    double ehs[nFiles];
    double eh1s[nFiles];
    double eh3s[nFiles];
    
    double Ilo[nFiles];
    double Il1o[nFiles];
    double Il3o[nFiles];
    double Iho[nFiles];
    double Ih1o[nFiles];
    double Ih3o[nFiles];
    double Ils[nFiles];
    double Il1s[nFiles];
    double Il3s[nFiles];
    double Ihs[nFiles];
    double Ih1s[nFiles];
    double Ih3s[nFiles];
    
    double a_elo=0,a_el1o=0,a_el3o=0,a_eho=0,a_eh1o=0,a_eh3o=0,a_els=0,a_el1s=0,a_el3s=0,a_ehs=0,a_eh1s=0,a_eh3s=0;
    double a_Ilo=0,a_Il1o=0,a_Il3o=0,a_Iho=0,a_Ih1o=0,a_Ih3o=0,a_Ils=0,a_Il1s=0,a_Il3s=0,a_Ihs=0,a_Ih1s=0,a_Ih3s=0;
    
    // os
    UInt_t d_tau_0_n_charged_tracks;
    double_t d_weight_mc;
    double_t d_kfactor;
    double_t d_filter_efficiency;
    double_t d_AMI_cross_section;
    
    TLorentzVector *d_tau_0_p4;
    TLorentzVector *d_lep_0_p4;
    TLorentzVector *d_met_reco_p4;
    
    //ss
    UInt_t b_tau_0_n_charged_tracks;
    double_t b_weight_mc;
    double_t b_kfactor;
    double_t b_filter_efficiency;
    double_t b_AMI_cross_section;
    
    TLorentzVector *b_tau_0_p4;
    TLorentzVector *b_lep_0_p4;
    TLorentzVector *b_met_reco_p4;
    
    double eventweight,kfactor,filterefficiency,crosssection;
    double tau_px,tau_py,tau_pz,tau_e,tau_pt; //,tau_eta,tau_phi;
    double lep_px,lep_py,lep_pz,lep_e,lep_et;//,lep_pt,lep_eta,lep_phi;
    double phi_tm;

    double met_px,met_py,met_pz,met_pt,met_e;
    double delta_phi,cos_phi,mt;  // phi(muon,met)
    
    stringstream  zttos_file[nFiles];
    stringstream  zttss_file[nFiles];
    
    TFile *finos[nFiles];
    TFile *finss[nFiles];
    TFile *fout[nFiles];
    TTree *Tos[nFiles];
    TTree *Tss[nFiles];
    
    TH1D *h_metadata[nFiles];
    TH1D *hls[nFiles];
    TH1D *hl1s[nFiles];
    TH1D *hl3s[nFiles];
    TH1D *hhs[nFiles];
    TH1D *hh1s[nFiles];
    TH1D *hh3s[nFiles];
    TH1D *hlo[nFiles];
    TH1D *hl1o[nFiles];
    TH1D *hl3o[nFiles];
    TH1D *hho[nFiles];
    TH1D *hh1o[nFiles];
    TH1D *hh3o[nFiles];
    
    
    //   muon iso = 0 ,with trigger
    for(int file_ii = 0; file_ii < nFiles; file_ii++){
         zttos_file[file_ii]<<"/Users/dracarys/Desktop/kadai/basecut/18/sherpa/ztt18cutos_"<<file_ii+28<<".root";
         zttss_file[file_ii]<<"/Users/dracarys/Desktop/kadai/basecut/18/sherpa/ztt18cutss_"<<file_ii+28<<".root";
        
        finos[file_ii] = new TFile( zttos_file[file_ii].str().c_str(), "read");
        finss[file_ii] = new TFile( zttss_file[file_ii].str().c_str(), "read");
        
        cout<<"file_ii ="<<file_ii<<"\n"<< zttos_file[file_ii].str().c_str()<<" read"<<endl;
        cout<< zttss_file[file_ii].str().c_str()<<" read"<<endl;
        
        // Σ xAOD event weight
        h_metadata[file_ii] = (TH1D*)finos[file_ii]->Get("h_metadata");
        sum_xAOD_weight[file_ii] = h_metadata[file_ii]->GetBinContent(8);
        //   Σ xAOD event weight  over
        
        //os
        Tos[file_ii] = (TTree*)finos[file_ii]->Get("NOMINAL");
        Tos[file_ii]->SetBranchStatus("*",0);
        Tos[file_ii]->SetBranchStatus("tau_0_p4",1);
        Tos[file_ii]->SetBranchStatus("lep_0_p4",1);
        Tos[file_ii]->SetBranchStatus("met_reco_p4",1);
        Tos[file_ii]->SetBranchStatus("AMI_cross_section",1);
        Tos[file_ii]->SetBranchStatus("kfactor",1);
        Tos[file_ii]->SetBranchStatus("filter_efficiency",1);
        Tos[file_ii]->SetBranchStatus("weight_mc",1);
        Tos[file_ii]->SetBranchStatus("tau_0_n_charged_tracks",1);
    
        d_tau_0_p4 =0;  // ******   初期化
        d_lep_0_p4 =0;
        d_met_reco_p4 =0;
        Tos[file_ii]->SetBranchAddress("tau_0_p4",&d_tau_0_p4);
        Tos[file_ii]->SetBranchAddress("lep_0_p4",&d_lep_0_p4);
        Tos[file_ii]->SetBranchAddress("met_reco_p4",&d_met_reco_p4);
        Tos[file_ii]->SetBranchAddress("AMI_cross_section",&d_AMI_cross_section);
        Tos[file_ii]->SetBranchAddress("kfactor",&d_kfactor);
        Tos[file_ii]->SetBranchAddress("filter_efficiency",&d_filter_efficiency);
        Tos[file_ii]->SetBranchAddress("weight_mc",&d_weight_mc);
        Tos[file_ii]->SetBranchAddress("tau_0_n_charged_tracks",&d_tau_0_n_charged_tracks);
    
        //ss
        Tss[file_ii] = (TTree*)finss[file_ii]->Get("NOMINAL");
        Tss[file_ii]->SetBranchStatus("*",0);
        Tss[file_ii]->SetBranchStatus("tau_0_p4",1);
        Tss[file_ii]->SetBranchStatus("lep_0_p4",1);
        Tss[file_ii]->SetBranchStatus("met_reco_p4",1);
        Tss[file_ii]->SetBranchStatus("AMI_cross_section",1);
        Tss[file_ii]->SetBranchStatus("kfactor",1);
        Tss[file_ii]->SetBranchStatus("filter_efficiency",1);
        Tss[file_ii]->SetBranchStatus("weight_mc",1);
        Tss[file_ii]->SetBranchStatus("tau_0_n_charged_tracks",1);
    
        b_tau_0_p4 =0;  // ******   初期化
        b_lep_0_p4 =0;
        b_met_reco_p4 =0;
        Tss[file_ii]->SetBranchAddress("tau_0_p4",&b_tau_0_p4);
        Tss[file_ii]->SetBranchAddress("lep_0_p4",&b_lep_0_p4);
        Tss[file_ii]->SetBranchAddress("met_reco_p4",&b_met_reco_p4);
        Tss[file_ii]->SetBranchAddress("AMI_cross_section",&b_AMI_cross_section);
        Tss[file_ii]->SetBranchAddress("kfactor",&b_kfactor);
        Tss[file_ii]->SetBranchAddress("filter_efficiency",&b_filter_efficiency);
        Tss[file_ii]->SetBranchAddress("weight_mc",&b_weight_mc);
        Tss[file_ii]->SetBranchAddress("tau_0_n_charged_tracks",&b_tau_0_n_charged_tracks);
    
        hls[file_ii] = new TH1D("h1","h",1,0,1);
        hl1s[file_ii] = new TH1D("h2","h",1,0,1);
        hl3s[file_ii] = new TH1D("h3","h",1,0,1);
        hhs[file_ii] = new TH1D("h4","h",1,0,1);
        hh1s[file_ii] = new TH1D("h5","h",1,0,1);
        hh3s[file_ii] = new TH1D("h6","h",1,0,1);
        hlo[file_ii] = new TH1D("h7","h",1,0,1);
        hl1o[file_ii] = new TH1D("h8","h",1,0,1);
        hl3o[file_ii] = new TH1D("h9","h",1,0,1);
        hho[file_ii] = new TH1D("h10","h",1,0,1);
        hh1o[file_ii] = new TH1D("h11","h",1,0,1);
        hh3o[file_ii] = new TH1D("h12","h",1,0,1);
        hls[file_ii]->Sumw2();
        hl1s[file_ii]->Sumw2();
        hl3s[file_ii]->Sumw2();
        hhs[file_ii]->Sumw2();
        hh1s[file_ii]->Sumw2();
        hh3s[file_ii]->Sumw2();
        hlo[file_ii]->Sumw2();
        hl1o[file_ii]->Sumw2();
        hl3o[file_ii]->Sumw2();
        hho[file_ii]->Sumw2();
        hh1o[file_ii]->Sumw2();
        hh3o[file_ii]->Sumw2();
        
    // os
        int nentries_os = Tos[file_ii]->GetEntries();
     //     cout<<"nentries_os ="<<nentries_os<<endl;
        for(int entryos_ii = 0; entryos_ii < nentries_os; entryos_ii++){
           
        Tos[file_ii]->GetEntry(entryos_ii);
            tau_py = d_tau_0_p4->Py();
            tau_pz = d_tau_0_p4->Pz();
            tau_pt = d_tau_0_p4->Pt();
            tau_e = d_tau_0_p4->Energy();
            
            lep_px = d_lep_0_p4->Px();
            lep_py = d_lep_0_p4->Py();
            lep_pz = d_lep_0_p4->Pz();
            lep_e = d_lep_0_p4->Energy();
            lep_et = d_lep_0_p4->Et();
           
            
            met_pt = d_met_reco_p4->Pt();      //met
            met_px = d_met_reco_p4->Px();
            met_py = d_met_reco_p4->Py();
            met_pz = d_met_reco_p4->Pz();
            met_e = d_met_reco_p4->Energy();
            
            TLorentzVector v1;
            v1.SetPxPyPzE(lep_px,lep_py,lep_pz,lep_e);
          
            TLorentzVector v3;
            v3.SetPxPyPzE(met_px,met_py,met_pz,met_e);
                          
            // Mt(muon,met)
            delta_phi = v1.DeltaPhi(v3);
            cos_phi = cos(delta_phi);
            mt = sqrt(2*met_e*lep_et*(1-cos_phi));
        
            
            //  w1 CR
            if(mt>60 && met_pt>30){
            
                crosssection = d_AMI_cross_section;
                filterefficiency = d_filter_efficiency;
                kfactor = d_kfactor;
                eventweight = d_weight_mc;
                    
                //low pt
                if(tau_pt<35){
                
          // inclusive  Number of wminusmunu(os) lowpt
           hlo[file_ii]->Fill(0.,eventweight);
          // 1prong
           if(d_tau_0_n_charged_tracks==1)hl1o[file_ii]->Fill(0.,eventweight);
          // 3pong
           if(d_tau_0_n_charged_tracks==3)hl3o[file_ii]->Fill(0.,eventweight);
          }// low pt
            
                // high pt
                if(tau_pt>35){
            // inclusive  Number of wminusmunu(os) high pt
            hho[file_ii]->Fill(0.,eventweight);
            //1prong
            if(d_tau_0_n_charged_tracks==1)hh1o[file_ii]->Fill(0.,eventweight);
            //3pong
            if(d_tau_0_n_charged_tracks==3)hh3o[file_ii]->Fill(0.,eventweight);
           }// high pt
            
        }// w1 CR
    }// -> for( entryos_ii )
    
    //ss
        int nentries_ss = Tss[file_ii]->GetEntries();
     //   cout<<"nentries_ss ="<<nentries_ss<<endl;
        for(int entryss_ii = 0; entryss_ii < nentries_ss; entryss_ii++){
            
        Tss[file_ii]->GetEntry(entryss_ii);
            tau_px = b_tau_0_p4->Px();
            tau_py = b_tau_0_p4->Py();
            tau_pz = b_tau_0_p4->Pz();
            tau_pt = b_tau_0_p4->Pt();
            tau_e = b_tau_0_p4->Energy();
            
            lep_px = b_lep_0_p4->Px();
            lep_py = b_lep_0_p4->Py();
            lep_pz = b_lep_0_p4->Pz();
            lep_e = b_lep_0_p4->Energy();
            lep_et = b_lep_0_p4->Et();
          
            met_pt = b_met_reco_p4->Pt();      //met
            met_px = b_met_reco_p4->Px();
            met_py = b_met_reco_p4->Py();
            met_pz = b_met_reco_p4->Pz();
            met_e = b_met_reco_p4->Energy();
            
            TLorentzVector v1;
            v1.SetPxPyPzE(lep_px,lep_py,lep_pz,lep_e);
           
            TLorentzVector v3;
            v3.SetPxPyPzE(met_px,met_py,met_pz,met_e);
         
            // Mt(muon,met)
            delta_phi = v1.DeltaPhi(v3);
            cos_phi = cos(delta_phi);
            mt = sqrt(2*met_e*lep_et*(1-cos_phi));
            
            // w1 CR
            if(mt>60 && met_pt>30){
                
               crosssection = b_AMI_cross_section;
               filterefficiency = b_filter_efficiency;
               kfactor = b_kfactor;
               eventweight = b_weight_mc;
                
                //low pt
                if(tau_pt<35){
             //inclusive  Number of wminusmunu(os) lowpt
             hls[file_ii]->Fill(0.,eventweight);
             //1prong
             if(b_tau_0_n_charged_tracks==1)hl1s[file_ii]->Fill(0.,eventweight);
             //3pong
             if(b_tau_0_n_charged_tracks==3)hl3s[file_ii]->Fill(0.,eventweight);
            }// low pt
            
                // high pt
                if(tau_pt>35){
            // inclusive  Number of wminusmunu(os) high pt
            hhs[file_ii]->Fill(0.,eventweight);
            //1prong
            if(b_tau_0_n_charged_tracks==1)hh1s[file_ii]->Fill(0.,eventweight);
            //3pong
            if(b_tau_0_n_charged_tracks==3)hh3s[file_ii]->Fill(0.,eventweight);
            }// high pt
        }// w1 CR
            
    }// -> for( entryos_ii )
    scale[file_ii] = (1000*crosssection*58.45*kfactor*filterefficiency)/sum_xAOD_weight[file_ii];
   

    Ilo[file_ii] = hlo[file_ii]->IntegralAndError(0,1+1,elo[file_ii]);
    Il1o[file_ii] = hl1o[file_ii]->IntegralAndError(0,1+1,el1o[file_ii]);
    Il3o[file_ii] = hl3o[file_ii]->IntegralAndError(0,1+1,el3o[file_ii]);
    Iho[file_ii] = hho[file_ii]->IntegralAndError(0,1+1,eho[file_ii]);
    Ih1o[file_ii] = hh1o[file_ii]->IntegralAndError(0,1+1,eh1o[file_ii]);
    Ih3o[file_ii] = hh3o[file_ii]->IntegralAndError(0,1+1,eh3o[file_ii]);
    Ils[file_ii] = hls[file_ii]->IntegralAndError(0,1+1,els[file_ii]);
    Il1s[file_ii] = hl1s[file_ii]->IntegralAndError(0,1+1,el1s[file_ii]);
    Il3s[file_ii] = hl3s[file_ii]->IntegralAndError(0,1+1,el3s[file_ii]);
    Ihs[file_ii] = hhs[file_ii]->IntegralAndError(0,1+1,ehs[file_ii]);
    Ih1s[file_ii] = hh1s[file_ii]->IntegralAndError(0,1+1,eh1s[file_ii]);
    Ih3s[file_ii] = hh3s[file_ii]->IntegralAndError(0,1+1,eh3s[file_ii]);
    
        a_Ilo += Ilo[file_ii]*scale[file_ii];
        a_Il1o += Il1o[file_ii]*scale[file_ii];
        a_Il3o += Il3o[file_ii]*scale[file_ii];
        a_Iho += Iho[file_ii]*scale[file_ii];
        a_Ih1o += Ih1o[file_ii]*scale[file_ii];
        a_Ih3o += Ih3o[file_ii]*scale[file_ii];
        a_Ils += Ils[file_ii]*scale[file_ii];
        a_Il1s += Il1s[file_ii]*scale[file_ii];
        a_Il3s += Il3s[file_ii]*scale[file_ii];
        a_Ihs += Ihs[file_ii]*scale[file_ii];
        a_Ih1s += Ih1s[file_ii]*scale[file_ii];
        a_Ih3s += Ih3s[file_ii]*scale[file_ii];
        
        a_elo += elo[file_ii]*scale[file_ii];
        a_el1o += el1o[file_ii]*scale[file_ii];
        a_el3o += el3o[file_ii]*scale[file_ii];
        a_eho += eho[file_ii]*scale[file_ii];
        a_eh1o += eh1o[file_ii]*scale[file_ii];
        a_eh3o += eh3o[file_ii]*scale[file_ii];
        a_els += els[file_ii]*scale[file_ii];
        a_el1s += el1s[file_ii]*scale[file_ii];
        a_el3s += el3s[file_ii]*scale[file_ii];
        a_ehs += ehs[file_ii]*scale[file_ii];
        a_eh1s += eh1s[file_ii]*scale[file_ii];
        a_eh3s += eh3s[file_ii]*scale[file_ii];
        
    
}   // for( file_ii )
    
    cout<<"double nzttlo = "<<a_Ilo<<";"
        <<"\ndouble ezttlo = "<<a_elo<<";"
        <<"\ndouble nzttl1o = "<<a_Il1o<<";"
        <<"\ndouble ezttl1o = "<<a_el1o<<";"
        <<"\ndouble nzttl3o = "<<a_Il3o<<";"
        <<"\ndouble ezttl3o = "<<a_el3o<<";"
        <<"\ndouble nzttho = "<<a_Iho<<";"
        <<"\ndouble ezttho = "<<a_eho<<";"
        <<"\ndouble nztth1o = "<<a_Ih1o<<";"
        <<"\ndouble eztth1o = "<<a_eh1o<<";"
        <<"\ndouble nztth3o = "<<a_Ih3o<<";"
        <<"\ndouble eztth3o = "<<a_eh3o<<";"

        <<"\ndouble nzttls = "<<a_Ils<<";"
        <<"\ndouble ezttls = "<<a_els<<";"
        <<"\ndouble nzttl1s = "<<a_Il1s<<";"
        <<"\ndouble ezttl1s = "<<a_el1s<<";"
        <<"\ndouble nzttl3s = "<<a_Il3s<<";"
        <<"\ndouble ezttl3s = "<<a_el3s<<";"
        <<"\ndouble nztths = "<<a_Ihs<<";"
        <<"\ndouble eztths = "<<a_ehs<<";"
        <<"\ndouble nztth1s = "<<a_Ih1s<<";"
        <<"\ndouble eztth1s = "<<a_eh1s<<";"
        <<"\ndouble nztth3s = "<<a_Ih3s<<";"
        <<"\ndouble eztth3s = "<<a_eh3s<<";"<<endl;
    
  
    cout<<"ztt with trigger"<<endl;
    
    cout<<"N^w1CR(SS) low pt:\ninclusive = "<<a_Ils <<"+-"<<a_els
        <<"\n1prong = "<<a_Il1s <<"+-"<<a_el1s
        <<"\n3prong = "<<a_Il3s <<"+-"<<a_el3s <<endl;
     
    cout<<"N^w1CR(SS) high pt:\ninclusive = "<<a_Ihs <<"+-"<<a_ehs
         <<"\n1prong = "<<a_Ih1s <<"+-"<<a_eh1s
         <<"\n3prong = "<<a_Ih3s <<"+-"<<a_eh3s <<endl;
     
    cout<<"N^w1CR(OS)low pt:\ninclusive = "<<a_Ilo <<"+-"<<a_elo
         <<"\n1prong = "<<a_Il1o <<"+-"<<a_el1o
         <<"\n3prong = "<<a_Il3o <<"+-"<<a_el3o <<endl;
     
    cout<<"N^w1CR(OS) high pt:\ninclusive = "<<a_Iho <<"+-"<<a_eho
         <<"\n1prong = "<<a_Ih1o <<"+-"<<a_eh1o
         <<"\n3prong = "<<a_Ih3o <<"+-"<<a_eh3o <<endl;
    
}
